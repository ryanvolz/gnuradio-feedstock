{% set version = "3.8.0.0" %}

package:
  name: gnuradio
  version: {{ version }}

source:
  url: https://github.com/gnuradio/gnuradio/releases/download/v{{ version }}/gnuradio-{{ version }}.tar.gz
  sha256: 3a9c90111f22f2f6f30450731dc671ad28ce824fc1a7bc8ea0783da9b95a7092
  patches:
    - 0001-Use-raw-strings-for-paths-substituted-directly-into-.patch
    - 0001-Don-t-use-hard-coded-path-constants.patch

build:
  number: 0
  skip: True  # [win and py2k]
  run_exports:
    - {{ pin_subpackage('gnuradio', min_pin='x.x.x', max_pin='x.x.x') }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake >=3.2
    - ninja
   # libudev needed to link against libusb on linux
    - {{ cdt('libudev') }}  # [linux]
   # below are needed to link with Qt for qtgui
   # some may be unused because of proper conda packages that get pulled in
   # (e.g. by gtk3) but keep them here as backup for the time being
    - {{ cdt('libice') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libsm') }}  # [linux]
    - {{ cdt('libx11') }}  # [linux]
    - {{ cdt('libxau') }}  # [linux]
    - {{ cdt('libxcb') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libxext') }}  # [linux]
    - {{ cdt('libxfixes') }}  # [linux]
    - {{ cdt('libxrender') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]
    - {{ cdt('libuuid') }}  # [linux]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('mesa-libgl-devel') }}  # [linux]

  host:
    - boost-cpp
    - click
    - click-plugins
    - fftw
    - gsl
    - libusb >=1
    - log4cpp
    - mako
    - mpir
    - numpy
    - pkg-config  # [not win]
    - python
    - six
    - swig
    - volk >=2
  # documentation
    #- doxygen
    #- graphviz
    #- sphinx
  # testing
    #- cppunit
  # gnuradio.audio
    - alsa-lib  # [linux]
    #- jack  # [linux]
    - portaudio  # [linux]
  # gnuradio companion
    - gtk3  # [linux]
    - lxml  # [linux]
    - pygobject  # [linux]
    - pyyaml  # [linux]
  # gnuradio ctrlport
    #- thrift
    #- thrift-cpp  # build fails with 0.11, 0.12
  # gnuradio.qtgui
    - pyqt
    - qt
    - qwt
  # gnuradio.uhd
    - uhd
  # gnuradio.video_sdl
    #- sdl2  # gnuradio depends on sdl 1
  # gnuradio.zeromq
    - cppzmq
    - zeromq

  run:
    - boost-cpp
    - click
    - click-plugins
    - {{ pin_compatible('fftw') }}
    - {{ pin_compatible('log4cpp') }}
    - mako
    - numpy
    - python
    - six
  # gnuradio.audio
    - {{ pin_compatible('alsa-lib') }}  # [linux]
    #- {{ pin_compatible('jack') }}  # [linux]
    - {{ pin_compatible('portaudio') }}  # [linux]
  # gnuradio companion
    - {{ pin_compatible('gtk3') }}  # [linux]
    - lxml  # [linux]
    - pygobject  # [linux]
    - pyyaml  # [linux]
  # gnuradio ctrlport
    #- thrift
  # gnuradio.qtgui
    - pyqt
    - {{ pin_compatible('qwt') }}
  # gnuradio.video_sdl
    #- {{ pin_compatible('sdl2') }}
  # gnuradio.zeromq
    - pyzmq

test:
  commands:
    - python -c 'import faulthandler; faulthandler.enable(); import gnuradio.analog._analog_swig'  # [osx and py3k]

  imports:
    - gnuradio.analog  # [not osx]
    - gnuradio.audio  # [not osx]
    - gnuradio.blocks  # [not osx]
    - gnuradio.channels  # [not osx]
    - gnuradio.digital  # [not osx]
    - gnuradio.dtv  # [not osx]
    - gnuradio.fec  # [not osx]
    - gnuradio.fft  # [not osx]
    - gnuradio.filter  # [not osx]
    - gnuradio.gr  # [not osx]
    - gnuradio.qtgui  # [not osx]
    - gnuradio.trellis  # [not osx]
    - gnuradio.uhd  # [not osx]
#    - gnuradio.video_sdl
    - gnuradio.vocoder  # [not osx]
    - gnuradio.wavelet  # [not osx]
    - gnuradio.zeromq  # [not osx]
    - pmt  # [not osx]

about:
  home: http://gnuradio.org/
  license: GPL-3.0
  license_file: COPYING
  summary: 'The free and open software radio ecosystem'
  description: |
    GNU Radio is a free software development toolkit that provides the signal
    processing runtime and processing blocks to implement software radios using
    readily-available, low-cost external RF hardware and commodity processors.
    It is widely used in hobbyist, academic and commercial environments to
    support wireless communications research as well as to implement real-world
    radio systems.

    GNU Radio applications are primarily written using the Python programming
    language, while the supplied, performance-critical signal processing path
    is implemented in C++ using processor floating point extensions where
    available. Thus, the developer is able to implement real-time, high-
    throughput radio systems in a simple-to-use, rapid-application-development
    environment.

  doc_url: http://gnuradio.org/doc/doxygen/
  dev_url: http://gnuradio.org/redmine/projects/gnuradio/wiki/Development

extra:
  recipe-maintainers:
    - ryanvolz
